services:
  proxy:
    build:
      context: ./proxy
      dockerfile: Dockerfile
    container_name: proxy
    ports:
      - "8080:8080"
    env_file:
      - .env
    networks:
      - firewall-network
    depends_on:
      - ratelimiter
      - cacher
      - rules-engine

  ratelimiter:
    build:
      context: ./ratelimiter
      dockerfile: Dockerfile
    container_name: ratelimiter
    ports:
      - "8081:8081"
    env_file:
      - .env
    networks:
      - firewall-network
    depends_on:
      - redis-limiter

  redis-limiter:
    image: redis:7-alpine
    container_name: redis-limiter
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      - firewall-network
    volumes:
      - redis_limiter_data:/data

  cacher:
    build:
      context: ./cacher
      dockerfile: Dockerfile
    container_name: cacher
    ports:
      - "8082:8082"
    env_file:
      - .env
    networks:
      - firewall-network
    depends_on:
      - redis-cacher

  redis-cacher:
    image: redis:7-alpine
    container_name: redis-cacher
    restart: unless-stopped
    ports:
      - "6380:6379"
    networks:
      - firewall-network
    volumes:
      - redis_cacher_data:/data

  server1:
    build:
      context: ./listener
    container_name: server1
    ports:
      - "9001:4567"
    networks:
      - firewall-network

  server2:
    build:
      context: ./listener
    container_name: server2
    ports:
      - "9002:4567"
    networks:
      - firewall-network

  server3:
    build:
      context: ./listener
    container_name: server3
    ports:
      - "9003:4567"
    networks:
      - firewall-network

  golangci-lint:
    image: golangci/golangci-lint:v1.55.2
    container_name: golangci-lint
    working_dir: /app
    volumes:
      - .:/app
    networks:
      - firewall-network
    environment:
      - GOTOOLCHAIN=auto
      - CGO_ENABLED=0
    entrypoint: ["/bin/sh", "-c"]
    command: ["/app/lint.sh"]

  auth:
    build:
      context: ./auth
      dockerfile: Dockerfile
    container_name: auth
    ports:
      - "8083:8083"
    env_file:
      - .env
    networks:
      - firewall-network
    depends_on:
      - postgres-auth

  postgres-auth:
    image: postgres:15-alpine
    container_name: postgres-auth
    restart: unless-stopped
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: secret
      POSTGRES_DB: postgres-auth
    ports:
      - "5432:5432"
    networks:
      - firewall-network
    volumes:
      - postgres_auth_data:/var/lib/postgresql/data

  rules-engine:
    build:
      context: ./rules_engine
      dockerfile: Dockerfile
    container_name: rules-engine
    ports:
      - "8084:8084"
    env_file:
      - .env
    networks:
      - firewall-network
    depends_on:
      - postgres-rules-engine

  postgres-rules-engine:
    image: postgres:15-alpine
    container_name: postgres-rules-engine
    restart: unless-stopped
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: secret
      POSTGRES_DB: postgres-rules-engine
    ports:
      - "5433:5432"
    networks:
      - firewall-network
    volumes:
      - postgres_rules_engine_data:/var/lib/postgresql/data
  
  filebeat:
    image: docker.elastic.co/beats/filebeat:8.13.0
    container_name: filebeat
    user: root
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./filebeat.yml:/usr/share/filebeat/filebeat.yml
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    networks:
      - firewall-network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node # одна нода, иначе контейнер не запустится, будет искать другие ноды для объединения в кластер
      - xpack.security.enabled=false # отключаем безопасность, tls и логин пользователя
      - ES_JAVA_OPTS=-Xms512m -Xmx512m # xms - размер heap памяти на старте JVM, xmx - максимальный доступный
    healthcheck:
      test: ["CMD", "curl", "-s", "-f", "http://localhost:9200/_cat/health"]
      interval: 3s
      timeout: 3s
      retries: 80
    ports:
      - "9200:9200"
    networks:
      - firewall-network
    volumes:
      - es_data:/usr/share/elasticsearch/data

  kibana:
    image: docker.elastic.co/kibana/kibana:8.13.0
    container_name: kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    networks:
      - firewall-network

networks:
  firewall-network:
    driver: bridge

volumes:
  redis_limiter_data:
  redis_cacher_data:
  postgres_auth_data:
  postgres_rules_engine_data:
  es_data:
